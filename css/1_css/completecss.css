/* css - “Cascading Style Sheets” */


/* three time of css is there :
1. inline css: css with every tag by using style attribute in between the tag.
2. internal css: css can be done by providing a style tag in the head. in this name the tag which we want to do css 
                    h1{ color: green;}|
3. external css: css can be done by making a new file by giving name to that with extension .css and 
linking that file in html page by using link tag.

order of importance: inline>internal>external
if we want to give more importance to external or internal we can use !important .*/


/* selector: we can do css for many types.
1. Element: h1,p,article, section
            in this we can do directly by using
                p{ color:green;}
2. ID : we can assign a id to a element or a tag and we can do css with the help of id
            in this we have to put # in front of the css
            #id{ color: green;}
3. class: we can assign a class to one or more tags and we can do css of all the tags one time.
            in this we have to put a dot . in front of the class
            .class{ color: green;}
4. group: style multiple elements using comma ,
            p,h1{ color : green;}
            p.paraclass{ color: green;} */










*{
    margin: 0px; 
    padding: 0px;
    /* this is universal selector what we will style will be applied to complete web-page  */
}





/* font and colors: */



    /* fonts */

p{

    /* font-style: italic; */  /* text in italic words */
    font-family: cursive;     /*  text in cursive writing*/
    font-size: 20px;          /* size of the letters */
    font-weight: 800;         /* dark the text */
    line-height: 50px;      /* gap between two lines */
}            
   

#head1{
    background-color: red;
    width: 350px;             /* max width of background color or of the specific area this tag will cover.  */
    height: 100px;             /* to increase the height of head tag */

}


#span1{
    background-color: rgb(224, 219, 224);
    color: rgb(248, 72, 14);
    width: 350px;
    height: 300px;
}

    /* colors */

#firstpara{
    background-color: aqua;
    color: brown;
    width: 350px;
    

}

#secondpara{
     background-color: rgb(238, 52, 52) ;
     width: 350px;
}

#thirdpara{
    background-color:rgba(45, 184, 189 ) ;
    width: 350px;
}

.firstclass{
    background-color: #528a9d;
}                                                                                                                                          

#fourpara{
             background-color: hsl(10, 68%, 67%); 
             width: 350px;  
}                              





/* border: */

#para1{
background-color: aliceblue;
border-style: dashed;
border-width: 3px;
border-color: brown;
border-radius: 10px;                    /* to curve the border or rounded from the corners. */
border-top-left-radius: 30px;           /*  to just make one corner rounded */
border-bottom: green 5px solid;       /* to make border only on one direction */
/* border: solid brown 3px; */      /* this is short form for making border. */
}











/* css box model  */
/* consist of 4 parts:
    1.content
    2.padding
    3.border
    4.margin*/




    #para2{
        background-color: bisque;
        border: solid brown 3px;
        width: 450px;
        padding: 50px;                   /* space between the border and the content. */
        margin: 50px;                    /* it is the space between two boxes */
        padding-left: 20px;
        padding-right: 40px;
        padding-top: 40px;
        padding: 10px 20px 30px 40px;     /*top,right,bottom,left  */
        padding: 20px 40px;              /* 20 for top 40 for bottom */
        }
        

        #para3{
            background-color: aqua;
            border: solid rgb(42, 165, 104) 3px;
            /* margin: 30px; */
            margin-top: 40px;
            margin-left: 50px;
            margin-bottom: 40px;
            margin-right: 50px;
            }
         




/* learn box sizing */






/* css display model */

/* 1.block element:
                properties:
          1. starts with new line
          2.width from extreme left to right of the screen
          3. it changes with given width or height.
          4. also changes with margin and padding. */


          #blockdiv1{
            border: 2px red solid;
            width: 300px;
            height: 200px;
            margin: 25px;
            padding: 50px;
          }


/*  2. Inline Elements: 
            properties:
        1. Try to come in same line if width is present in same line.
        2. width will be only taken upto the content.
        3. it does not changes with given width and height.
        4. custom margins can be applied only in horizontal direction but padding can be  applied every where.*/




        #inlinespan1{
            border: 2px green solid;
            width: 800px;
            height: 500px;
            margin: 50px;
            padding: 50px;
        }





        #inlinespan2{
            display: block;
            border: 2px rgb(112, 91, 142) solid;
            width: 250px;
            height: 70px;
            margin: 50px;
            padding: 50px;
        }



    .blockinline1{
        display: inline;
        border: 2px rgb(112, 91, 142) solid;
        width: 50px;
        height: 70px;
        margin: 50px;
        padding: 50px;
    }

    .blockinline2{
        display: inline;
        border: 2px rgb(112, 91, 142) solid;
        width: 50px;
        height: 70px;
        margin: 50px;
        padding: 50px; 
    }









/* css position property */



    .imgcontainer{
        border: 5px solid black;
        height: 1500px;
        background-color: aqua;
    }


    img{
        margin: 20px;
    }



    .imgcontainer2{
        position: relative;            /* this position relative makes that we can change the position of the elements. */  
        /* position: absolute; */
        top: 90px;
        left: 70px;  
        right: 400px;
        bottom: 40px;      
    }

    .imgcontainer1{
        position: fixed; 
        width: 300px;           /*  this fill fix the position of the object on the entire page         */
    }


    /* this relative means i am positioning  the object accordingly to current windows.*/

    /* the space of the object where it was first it will be maintained. */
    /* .while position is absolute the space will not be maintained it will be covered by next object.  */


    .imgcontainer2{
        position: sticky;
        top: 30px;
        left: 100px;
    }

    /* this position will also be fixed like fixed position but this will only remain fixed upto the parent 
        container that is div function here.
        
        but in fixed it reamins on complete page like we see home page.*/













    /* css size units: */



    .units1{
        border: 2px solid red;
        width: 50%;                        /*this 50 % is according to its parent container.  */  
    }




    .unitsparent1{
        background-color: beige;
        border: 2px green solid;
        width: 50%;                     /* first this will be done in 50% according to its parent that is body. */
    }

    .unitschild1{
        background-color: aqua;
        border: 2px red solid;
        width: 50%;                       /* now this will be 50% of its parent that is units parent1. */
    }



    .vhcontainer1{
        background-color: #528a9d;
        height: 100vh;                       /* this will take the complete height space of the viewport.  */
        width: 50vw;                         /* this will give half to the width */
    }

    



    /* pixels. */

    .pixelscontainer1{
        border: 2px violet solid;
        font-size: 50px;
    }






    .wrapper1{
        font-size: l;
    }

    .boxpx{
        width: 200px;
    }

    .boxem{
            width: 200em;
    }

    .boxvw{
        width: 100vw;
    }

    .rem{
        border: 2px red solid;
        font-size: 5rem;
    }